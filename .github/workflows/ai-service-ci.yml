name: AI Service CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'ai_service/**'
      - '.github/workflows/ai-service-ci.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'ai_service/**'
      - '.github/workflows/ai-service-ci.yml'
  workflow_dispatch:

permissions:
  contents: read
  security-events: write

env:
  PYTHON_VERSION: '3.11'
  WORKING_DIRECTORY: './ai_service'

jobs:
  test:
    name: Test & Coverage
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        cache-dependency-path: ai_service/requirements.txt
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          ffmpeg \
          libsndfile1 \
          libsndfile1-dev \
          libasound2-dev \
          portaudio19-dev \
          build-essential \
          curl
        
    - name: Install Python dependencies
      working-directory: ${{ env.WORKING_DIRECTORY }}
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov pytest-asyncio pytest-mock
        pip install -r requirements.txt
        
    - name: Create test directories
      working-directory: ${{ env.WORKING_DIRECTORY }}
      run: |
        mkdir -p coverage
        mkdir -p test-results
        
    - name: Run unit tests with coverage
      working-directory: ${{ env.WORKING_DIRECTORY }}
      run: |
        pytest tests/ \
          --cov=app \
          --cov-report=term \
          --cov-report=json:coverage/coverage.json \
          --cov-report=html:coverage/html \
          --cov-report=xml:coverage/coverage.xml \
          --junit-xml=test-results/junit.xml \
          --verbose
          
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4
      with:
        directory: ${{ env.WORKING_DIRECTORY }}/coverage
        fail_ci_if_error: false
        verbose: true
        token: ${{ secrets.CODECOV_TOKEN }}
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: ${{ env.WORKING_DIRECTORY }}/test-results/
        retention-days: 30
        
    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports
        path: ${{ env.WORKING_DIRECTORY }}/coverage/
        retention-days: 30

  lint:
    name: Lint & Format Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy bandit safety
        
    - name: Run Black (formatting check)
      working-directory: ${{ env.WORKING_DIRECTORY }}
      run: black --check --diff app/ tests/
      continue-on-error: true
      
    - name: Run isort (import sorting check)
      working-directory: ${{ env.WORKING_DIRECTORY }}
      run: isort --check-only --diff app/ tests/
      continue-on-error: true
      
    - name: Run flake8 (linting)
      working-directory: ${{ env.WORKING_DIRECTORY }}
      run: flake8 app/ tests/ --max-line-length=88 --exclude=__pycache__
      continue-on-error: true
      
    - name: Run mypy (type checking)
      working-directory: ${{ env.WORKING_DIRECTORY }}
      run: mypy app/ --ignore-missing-imports
      continue-on-error: true

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        cache-dependency-path: ai_service/requirements.txt
        
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit
        
    - name: Install project dependencies
      working-directory: ${{ env.WORKING_DIRECTORY }}
      run: pip install -r requirements.txt
      
    - name: Run Safety (dependency vulnerability check)
      working-directory: ${{ env.WORKING_DIRECTORY }}
      run: safety check --json --output safety-report.json
      continue-on-error: true
      
    - name: Run Bandit (security linting)
      working-directory: ${{ env.WORKING_DIRECTORY }}
      run: |
        bandit -r app/ -f json -o bandit-report.json
      continue-on-error: true
      
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          ${{ env.WORKING_DIRECTORY }}/safety-report.json
          ${{ env.WORKING_DIRECTORY }}/bandit-report.json
        retention-days: 30

  # Trivy security scan for filesystem
  trivy-scan:
    name: Trivy Security Scan
    runs-on: ubuntu-latest
    needs: [test, lint]
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: ${{ env.WORKING_DIRECTORY }}
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'