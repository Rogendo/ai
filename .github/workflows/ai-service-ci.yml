name: AI Service CI Pipeline

on:
  push:
    branches: [main, develop]
    paths:
      - 'ai_service/**'
  pull_request:
    branches: [main, develop]
    paths:
      - 'ai_service/**'

permissions:
  contents: read
  security-events: write

jobs:
  test-and-coverage:
    name: Test & Coverage
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ai_service

    steps:
      - name: ⬇️ Checkout Repository
        uses: actions/checkout@v4
        
      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: ai_service/requirements.txt
          
      - name: 📦 Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ai_service/.pytest_cache
          key: ${{ runner.os }}-pip-${{ hashFiles('ai_service/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
        
      - name: 🔧 Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg libsndfile1 libsndfile1-dev
        
      - name: 📥 Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov pytest-asyncio pytest-mock pytest-benchmark httpx websockets
          pip install -r requirements.txt
        
      - name: 📁 Create test directories
        run: |
          mkdir -p coverage test-results
        
      - name: 🧪 Run Tests with Coverage
        run: |
          pytest tests/ \
            --cov=app \
            --cov-report=term \
            --cov-report=json:coverage/coverage.json \
            --cov-report=html:coverage/html \
            --cov-report=xml:coverage/coverage.xml \
            --junit-xml=test-results/junit.xml \
            --verbose \
            --continue-on-collection-errors \
            --tb=short
        continue-on-error: true
        
      - name: 📊 Upload Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ai-service-test-results
          path: ai_service/test-results/
          retention-days: 30
          
      - name: 📈 Upload Coverage Reports
        uses: actions/upload-artifact@v4
        with:
          name: ai-service-coverage-reports
          path: ai_service/coverage/
          retention-days: 30

  lint-and-format:
    name: Lint & Format Check
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ai_service

    steps:
      - name: ⬇️ Checkout Repository
        uses: actions/checkout@v4
        
      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
        
      - name: 📥 Install linting tools
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort mypy
        
      - name: ⚫ Check Black formatting
        run: black --check --diff app/ tests/
        continue-on-error: true
        
      - name: 🔤 Check import sorting
        run: isort --check-only --diff app/ tests/
        continue-on-error: true
        
      - name: 🔍 Run flake8 linting
        run: flake8 app/ tests/ --max-line-length=88 --exclude=__pycache__
        continue-on-error: true
        
      - name: 🏷️ Run mypy type checking
        run: mypy app/ --ignore-missing-imports
        continue-on-error: true

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ai_service

    steps:
      - name: ⬇️ Checkout Repository
        uses: actions/checkout@v4
        
      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: ai_service/requirements.txt
        
      - name: 📥 Install dependencies & security tools
        run: |
          python -m pip install --upgrade pip
          pip install safety bandit
          pip install -r requirements.txt
        
      - name: 🛡️ Run Safety (dependency check)
        run: safety check --json --output safety-report.json
        continue-on-error: true
        
      - name: 🔐 Run Bandit (security linting)
        run: bandit -r app/ -f json -o bandit-report.json
        continue-on-error: true
        
      - name: 📁 Upload Security Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ai-service-security-reports
          path: |
            ai_service/safety-report.json
            ai_service/bandit-report.json
          retention-days: 30