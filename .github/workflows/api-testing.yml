name: REST API Automated Testing

on:
  push:
    branches: [main, develop, justphyl]
    paths:
      - 'backend/**'
  pull_request:
    branches: [main, develop]
    paths:
      - 'backend/**'

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        php-version: ['8.1', '8.2', '8.3', '8.4']
    
    name: PHP ${{ matrix.php-version }} Tests
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ matrix.php-version }}
        extensions: mysqli, pdo, pdo_mysql, mbstring, xml, json
        tools: phpunit:9.6
    
    - name: Create test directories
      run: |
        cd backend/api
        mkdir -p test_data/users test_data/csv
        chmod -R 755 test_data
    
    - name: Run SessionTest
      run: |
        cd backend/api
        phpunit tests/SessionTest.php --verbose
    
    - name: Run RestAdvancedTest
      run: |
        cd backend/api
        phpunit tests/RestAdvancedTest.php --verbose
    
    - name: Run IndexTest
      run: |
        cd backend/api
        phpunit tests/IndexTest.php --verbose

  coverage:
    runs-on: ubuntu-latest
    needs: test
    if: success()
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup PHP with Coverage
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.3'
        extensions: mysqli, pdo, pdo_mysql, mbstring, xml, json
        coverage: xdebug
        tools: phpunit:9.6
    
    - name: Create directories
      run: |
        cd backend/api
        mkdir -p test_data/users test_data/csv coverage
        chmod -R 755 test_data coverage
    
    - name: Generate coverage
      run: |
        cd backend/api
        phpunit --coverage-html coverage tests/SessionTest.php tests/RestAdvancedTest.php tests/IndexTest.php
    
    - name: Upload coverage
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: backend/api/coverage/

  summary:
    runs-on: ubuntu-latest
    needs: [test, coverage]
    if: always()
    
    steps:
    - name: Test Results
      run: |
        echo "Test Status: ${{ needs.test.result }}"
        echo "Coverage Status: ${{ needs.coverage.result }}"
        
        if [ "${{ needs.test.result }}" == "success" ]; then
          echo "✅ All tests passed successfully!"
        else
          echo "❌ Some tests failed"
          exit 1
        fi