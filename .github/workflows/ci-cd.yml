name: Docs CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'docs/**'
      - '.github/workflows/ci-cd.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'docs/**'
      - '.github/workflows/ci-cd.yml'
  workflow_dispatch: 
  
  permissions:
  contents: read


env:
  NODE_VERSION: '18.0.0'

jobs:
  test:
    name: Test & Coverage
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: docs/package-lock.json
        
    - name: Install dependencies
      working-directory: ./docs
      run: npm ci
      
    - name: Run unit tests
      working-directory: ./docs
      run: npm run test:unit
      
    - name: Run tests with coverage
      working-directory: ./docs
      run: npm run test:unit:coverage
      
    - name: Build documentation (required for link testing)
      working-directory: ./docs
      run: npm run build
      
    - name: Run link validation
      working-directory: ./docs
      run: npm run test:links
      
    - name: Run health checks
      working-directory: ./docs
      run: npm run test:health
      
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        directory: ./docs/coverage
        fail_ci_if_error: false
        verbose: true

  lint:
    name: Lint & Format Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: docs/package-lock.json
        
    - name: Install dependencies
      working-directory: ./docs
      run: npm ci
      
    # Run markdown linting (optional dependency)
    - name: Run markdown linting
      working-directory: ./docs
      run: npm run lint
      continue-on-error: true
      
    - name: Fix markdown issues
      working-directory: ./docs
      run: npm run lint:fix
      continue-on-error: true

  build:
    name: Build Documentation
    runs-on: ubuntu-latest
    needs: [test, lint]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: docs/package-lock.json
        
    - name: Install dependencies
      working-directory: ./docs
      run: npm ci
      
    - name: Build documentation
      working-directory: ./docs
      run: npm run build
      
    - name: Test build integrity
      working-directory: ./docs
      run: npm run test:build
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: docs-build
        path: docs/docs/.vitepress/dist/
        retention-days: 30

  # Optional: Docker build (matches your docker scripts)
  docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          
    - name: Build Docker image
      working-directory: ./docs
      run: npm run docker:build
      
    - name: Tag and push Docker image
      run: |
        docker tag aidocs:latest ghcr.io/${{ github.repository }}:latest
        docker push ghcr.io/${{ github.repository }}:latest

  # Security scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: docs/package-lock.json
        
    - name: Install dependencies
      working-directory: ./docs
      run: npm ci
        
    - name: Run npm audit
      working-directory: ./docs
      run: npm audit --audit-level=high
      continue-on-error: true
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: './docs'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'