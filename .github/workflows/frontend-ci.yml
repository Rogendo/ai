name: Case Management CI Pipeline

on:
  push:
    branches: [main, develop]
    paths:
      - 'frontend/call-center-case-mgmt/**'
      - '.github/workflows/frontend-ci.yml'
  pull_request:
    branches: [main, develop]
    paths:
      - 'frontend/call-center-case-mgmt/**'
      - '.github/workflows/frontend-ci.yml'

permissions:
  contents: read

jobs:
  build-and-test:
    name: Build and Test Frontend
    runs-on: ubuntu-latest
    timeout-minutes: 15

    defaults:
      run:
        working-directory: frontend/call-center-case-mgmt

    steps:
      - name: ⬇️ Checkout Repository
        uses: actions/checkout@v4

      - name: 🟢 Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/call-center-case-mgmt/package-lock.json

      - name: 📦 Cache node_modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            frontend/call-center-case-mgmt/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('frontend/call-center-case-mgmt/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: 🔍 Debug - Check package files
        run: |
          echo "Frontend directory contents:"
          ls -la
          echo "Checking package files:"
          [ -f package.json ] && echo "✅ package.json exists" || echo "❌ package.json missing"
          [ -f package-lock.json ] && echo "✅ package-lock.json exists" || echo "❌ package-lock.json missing"
          if [ -f package-lock.json ]; then
            echo "Package-lock.json lockfileVersion:"
            grep -o '"lockfileVersion":[^,]*' package-lock.json || echo "No lockfileVersion found"
          fi

      - name: 📥 Install dependencies
        run: |
          # Try npm ci first, fallback to npm install if package-lock.json issues
          if [ -f package-lock.json ]; then
            npm ci
          else
            echo "⚠️ No package-lock.json found, running npm install"
            npm install
            echo "🔧 Generating package-lock.json for future runs"
          fi

      - name: 📋 Check available scripts
        run: |
          echo "📜 Available npm scripts:"
          npm run
          echo "📦 Project info:"
          cat package.json | grep -A 10 '"scripts"' || echo "No scripts section found"

      - name: 🧪 Run Tests (Vue/Vitest)
        run: |
          echo "🔍 Looking for test files..."
          if [ -d "src/pages/tests" ] || [ -d "src/utils/tests" ]; then
            echo "✅ Test directories found:"
            find src -name "tests" -type d
            echo "📁 Test files:"
            find src -name "*.test.*" -o -name "*.spec.*" 2>/dev/null || echo "No test files with standard naming found"
            
            # Try to run tests with different methods
            if npm run | grep -q "test"; then
              echo "Running npm run test"
              npm run test
            elif command -v vitest &> /dev/null; then
              echo "Running vitest directly"
              npx vitest run
            else
              echo "⚠️ Test framework not configured, but test directories exist"
              echo "Consider adding a test script to package.json"
            fi
          else
            echo "⚠️ No test directories found"
          fi
        continue-on-error: true

      - name: 🛠️ Build Frontend App
        run: npm run build

      - name: 📊 Bundle Size Check
        run: |
          if [ -d "dist" ]; then
            echo "📦 Build output size:"
            du -sh dist/
            echo "📋 Build contents:"
            ls -la dist/
          else
            echo "❌ Build directory not found"
            exit 1
          fi

      - name: 📁 Upload Case Management build
        uses: actions/upload-artifact@v4
        with:
          name: case-management-build
          path: frontend/call-center-case-mgmt/dist
          retention-days: 30

  lint-and-format:
    name: Lint & Format Case Management
    runs-on: ubuntu-latest
    timeout-minutes: 10

    defaults:
      run:
        working-directory: frontend/call-center-case-mgmt

    steps:
      - name: ⬇️ Checkout Repository
        uses: actions/checkout@v4

      - name: 🟢 Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/call-center-case-mgmt/package-lock.json

      - name: 📥 Install dependencies
        run: |
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm install
          fi

      - name: 🎨 Check code formatting (if Prettier configured)
        run: |
          if npm list prettier &>/dev/null; then
            npx prettier --check src/
          else
            echo "⚠️ Prettier not configured, skipping format check"
          fi
        continue-on-error: true

      - name: 🔍 Run ESLint (if configured)
        run: |
          if npm list eslint &>/dev/null; then
            npm run lint || npx eslint src/
          else
            echo "⚠️ ESLint not configured, skipping lint check"
          fi
        continue-on-error: true

      - name: 🏷️ TypeScript type checking (if configured)
        run: |
          if [ -f "tsconfig.json" ]; then
            npx tsc --noEmit
          else
            echo "⚠️ TypeScript not configured, skipping type check"
          fi
        continue-on-error: true

  security-audit:
    name: Security Audit Case Management
    runs-on: ubuntu-latest
    timeout-minutes: 5

    defaults:
      run:
        working-directory: frontend/call-center-case-mgmt

    steps:
      - name: ⬇️ Checkout Repository
        uses: actions/checkout@v4

      - name: 🟢 Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: 📥 Install dependencies
        run: |
          if [ -f package-lock.json ]; then
            npm ci --audit
          else
            npm install
          fi

      - name: 🛡️ Run npm audit
        run: npm audit --audit-level=high
        continue-on-error: true

      - name: 📋 Generate dependency report
        run: |
          echo "📦 Installed packages:"
          npm list --depth=0
          echo "🔍 Outdated packages:"
          npm outdated || echo "All packages up to date"
        continue-on-error: true