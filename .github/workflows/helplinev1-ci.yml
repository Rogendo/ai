name: HelplineV1 CI
permissions:
  contents: write

on:
  push:
    paths:
      - 'helplinev1/**'
    branches: [main]
  pull_request:
    paths:
      - 'helplinev1/**'
    branches: [main]
  workflow_dispatch:

jobs:
  # Unit Tests and Code Coverage for REST API Backend
  unit-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        php-version: ['8.2', '8.3']
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: rootpassword
          MYSQL_DATABASE: helpline_test
          MYSQL_USER: helpline_user
          MYSQL_PASSWORD: helpline_pass
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-version }}
          extensions: mbstring, xml, ctype, iconv, intl, pdo, pdo_mysql, dom, filter, gd, hash, json, libxml, openssl, pcre, session, tokenizer, zip, pcov
          tools: composer:v2
          coverage: pcov

      - name: Cache Composer packages
        id: composer-cache
        uses: actions/cache@v4
        with:
          path: helplinev1/rest_api/vendor
          key: ${{ runner.os }}-php-${{ matrix.php-version }}-${{ hashFiles('helplinev1/rest_api/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-${{ matrix.php-version }}-

      - name: Install Composer dependencies
        working-directory: helplinev1/rest_api
        run: composer install --prefer-dist --no-progress --no-suggest

      - name: Setup test database
        run: |
          mysql -h 127.0.0.1 -u root -prootpassword -e "CREATE DATABASE IF NOT EXISTS helpline_test;"
          mysql -h 127.0.0.1 -u root -prootpassword helpline_test < helplinev1/rest_api/config/uchl.sql || echo "Schema file not found, proceeding with tests"

      - name: Run Unit Tests
        working-directory: helplinev1/rest_api
        run: ./vendor/bin/phpunit --verbose --testdox

      - name: Run Tests with Coverage (PCOV)
        working-directory: helplinev1/rest_api
        run: ./vendor/bin/phpunit --coverage-text --coverage-clover=coverage.xml --coverage-html=coverage-html

      - name: Generate Real Coverage Analysis
        working-directory: helplinev1/rest_api
        run: php calculate-coverage.php

      - name: Generate and Commit Coverage Report
        if: matrix.php-version == '8.3'
        working-directory: helplinev1/rest_api
        run: |
          # Get coverage percentage
          COVERAGE=$(php calculate-coverage.php | grep "Estimated Line Coverage" | grep -oE "[0-9]+%" | grep -oE "[0-9]+" || echo "0")
          TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S UTC')
          PHP_VERSION="${{ matrix.php-version }}"
          
          # Generate markdown file in project root
          cat > ../../helpline-coverage.md << EOF
          # HelplineV1 Code Coverage Report
          
          **Generated:** $TIMESTAMP  
          **PHP Version:** $PHP_VERSION  
          **Branch:** ${{ github.ref_name }}  
          **Commit:** ${{ github.sha }}
          
          ## Coverage Summary
          
          | Metric | Value |
          |--------|-------|
          | Line Coverage | ${COVERAGE}% |
          | Status | âœ… Report Generated |
          
          ## Test Results
          
          - **PHP Version Tested:** $PHP_VERSION
          - **Database:** MySQL 8.0
          - **Test Command:** \`./vendor/bin/phpunit --verbose --testdox\`
          - **Coverage Tool:** PCOV
          
          ## Files and Directories
          
          Coverage analysis includes all PHP files in the REST API backend located in \`helplinev1/rest_api/\`.
          
          ## Additional Reports
          
          - Detailed HTML coverage report available in CI artifacts
          - Clover XML format uploaded to Codecov
          - Full test results archived for 30 days
          
          ---
          *This report was automatically generated by GitHub Actions*
          EOF
          
          # Commit and push the file
          cd ../../
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add helpline-coverage.md
          if ! git diff --staged --quiet; then
            git commit -m "ðŸ“Š Auto-update coverage report - ${COVERAGE}% coverage"
            git push
          fi

      - name: Upload Coverage Markdown as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: helpline-coverage-md-php${{ matrix.php-version }}
          path: helpline-coverage.md
          retention-days: 30

      - name: Upload Coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./helplinev1/rest_api/coverage.xml
          flags: helplinev1-backend
          name: helplinev1-rest-api-coverage
          fail_ci_if_error: false

      - name: Archive Coverage Results
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-php${{ matrix.php-version }}
          path: |
            helplinev1/rest_api/coverage-html/
            helplinev1/rest_api/coverage.xml
            helplinev1/rest_api/test-results.xml
          retention-days: 30

      - name: Archive Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-php${{ matrix.php-version }}
          path: helplinev1/rest_api/test-results.xml
          retention-days: 30

  # Docker Build and Integration Tests
  build-and-test:
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build PHP image
        run: |
          docker build -t helpline-php helplinev1/docker/php

      - name: Build NGINX image
        run: |
          docker build -t helpline-nginx helplinev1/docker/nginx

      - name: Run Docker Compose
        working-directory: helplinev1
        run: |
          docker compose up -d

      - name: Wait for app to be ready
        run: sleep 20  # Allow containers to settle

      - name: Check web endpoint
        run: |
          curl -I http://localhost:8087 || echo "Web check failed"

      - name: Test API endpoints
        run: |
          echo "Testing REST API endpoints..."
          curl -f http://localhost:8087/api/ || echo "API endpoint test failed"
          
      - name: Run API Integration Tests
        working-directory: helplinev1/rest_api
        run: |
          if [ -f "./vendor/bin/phpunit" ]; then
            docker exec helpline-php-api ./vendor/bin/phpunit tests/Integration/ --verbose || echo "Integration tests not available"
          fi

      - name: Cleanup
        if: always()
        working-directory: helplinev1
        run: docker compose down