name: HelplineV1 CI
permissions:
  contents: write

on:
  push:
    paths:
      - 'helplinev1/**'
  pull_request:
    paths:
      - 'helplinev1/**'
  workflow_dispatch:

jobs:
  # Unit Tests and Code Coverage for REST API Backend
  unit-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        php-version: ['8.2', '8.3']
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: rootpassword
          MYSQL_DATABASE: helpline_test
          MYSQL_USER: helpline_user
          MYSQL_PASSWORD: helpline_pass
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-version }}
          extensions: mbstring, xml, ctype, iconv, intl, pdo, pdo_mysql, dom, filter, gd, hash, json, libxml, openssl, pcre, session, tokenizer, zip, pcov
          tools: composer:v2
          coverage: pcov

      - name: Cache Composer packages
        id: composer-cache
        uses: actions/cache@v4
        with:
          path: helplinev1/rest_api/vendor
          key: ${{ runner.os }}-php-${{ matrix.php-version }}-${{ hashFiles('helplinev1/rest_api/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-${{ matrix.php-version }}-

      - name: Install Composer dependencies
        working-directory: helplinev1/rest_api
        run: composer install --prefer-dist --no-progress --no-suggest

      - name: Setup test database
        run: |
          mysql -h 127.0.0.1 -u root -prootpassword -e "CREATE DATABASE IF NOT EXISTS helpline_test;"
          mysql -h 127.0.0.1 -u root -prootpassword helpline_test < helplinev1/rest_api/config/uchl.sql || echo "Schema file not found, proceeding with tests"

      - name: Run Unit Tests
        working-directory: helplinev1/rest_api
        run: ./vendor/bin/phpunit --verbose --testdox

      - name: Run Tests with Coverage (PCOV)
        working-directory: helplinev1/rest_api
        run: ./vendor/bin/phpunit --coverage-text --coverage-clover=coverage.xml --coverage-html=coverage-html

      - name: Generate Real Coverage Analysis
        working-directory: helplinev1/rest_api
        run: |
          # Use original calculation method that was working
          php calculate-coverage.php > coverage-analysis.txt
          COVERAGE=$(php calculate-coverage.php | grep "Estimated Line Coverage" | grep -oE "[0-9]+%" | grep -oE "[0-9]+" || echo "0")
          echo "Detected Coverage: ${COVERAGE}%"
          echo "COVERAGE_PERCENTAGE=$COVERAGE" >> $GITHUB_ENV
          
          # Set coverage color for badge
          if [ "$COVERAGE" -ge "80" ]; then
            echo "COVERAGE_COLOR=brightgreen" >> $GITHUB_ENV
          elif [ "$COVERAGE" -ge "60" ]; then
            echo "COVERAGE_COLOR=yellow" >> $GITHUB_ENV
          elif [ "$COVERAGE" -ge "40" ]; then
            echo "COVERAGE_COLOR=orange" >> $GITHUB_ENV
          else
            echo "COVERAGE_COLOR=red" >> $GITHUB_ENV
          fi

      - name: Generate Coverage README.md
        working-directory: helplinev1/rest_api
        run: |
          # Create detailed coverage report similar to AI service workflow
          TIMESTAMP=$(date -u "+%Y-%m-%d %H:%M:%S UTC")
          
          # Get detailed coverage information
          COVERAGE_DETAILS="No detailed coverage data available"
          if [ -f "coverage-analysis.txt" ]; then
            COVERAGE_DETAILS=$(cat coverage-analysis.txt)
          fi
          
          # Get PHPUnit test output for detailed test information
          TEST_DETAILS="No test details available"
          if [ -f "phpunit-output.txt" ]; then
            TEST_DETAILS=$(cat phpunit-output.txt | tail -20)
          else
            # Try to get recent test output
            ./vendor/bin/phpunit --testdox > test-summary.txt 2>&1 || echo "Test summary not available" > test-summary.txt
            if [ -f "test-summary.txt" ]; then
              TEST_DETAILS=$(cat test-summary.txt)
            fi
          fi
          
          cat > ../helpline-coverage.md << EOF
          # 📊 HelplineV1 Code Coverage Report

          **Branch:** ${{ github.ref_name }}
          **Commit:** \`${GITHUB_SHA:0:7}\`
          **Generated:** ${TIMESTAMP}
          **PHP Version:** ${{ matrix.php-version }}
          **Workflow:** [\`${{ github.run_id }}\`](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})

          ## 🎯 Coverage Summary

          ![Coverage](https://img.shields.io/badge/Coverage-${{ env.COVERAGE_PERCENTAGE }}%25-${{ env.COVERAGE_COLOR }})
          ![Tests](https://img.shields.io/badge/Tests-PHPUnit-blue)

          | Metric | Value | Status |
          |--------|-------|--------|
          | **Overall Coverage** | **${{ env.COVERAGE_PERCENTAGE }}%** | $([ "${{ env.COVERAGE_PERCENTAGE }}" -ge "80" ] && echo "✅ Excellent" || [ "${{ env.COVERAGE_PERCENTAGE }}" -ge "60" ] && echo "🟡 Good" || [ "${{ env.COVERAGE_PERCENTAGE }}" -ge "40" ] && echo "🟠 Fair" || echo "🔴 Needs Improvement") |
          | **Generated** | ${TIMESTAMP} | |
          | **Branch** | ${{ github.ref_name }} | |
          | **PHP Version** | ${{ matrix.php-version }} | |

          ## 📈 Detailed Coverage Analysis

          \`\`\`
          ${COVERAGE_DETAILS}
          \`\`\`

          ## 🧪 Test Summary

          \`\`\`
          ${TEST_DETAILS}
          \`\`\`

          ## 📁 Generated Files

          - \`coverage.xml\` - XML coverage report for CI/CD integration
          - \`coverage-html/\` - HTML coverage report for detailed browsing
          - \`coverage-analysis.txt\` - Detailed coverage analysis
          - \`test-summary.txt\` - Test execution summary

          ## 🔍 How to View Coverage

          ### HTML Report (Recommended)
          Open \`helplinev1/rest_api/coverage-html/index.html\` in your browser for an interactive view.

          ### Command Line
          \`\`\`bash
          cd helplinev1/rest_api
          ./vendor/bin/phpunit --coverage-text
          \`\`\`

          ### XML Integration
          Use \`coverage.xml\` for integration with code coverage services like Codecov.

          ## 📊 Coverage Trends

          - **Current Coverage**: ${{ env.COVERAGE_PERCENTAGE }}%
          - **Target**: 80%+ (Excellent), 60%+ (Good), 40%+ (Minimum)
          - **Framework**: PHPUnit with PCOV

          ---
          *Report generated automatically by GitHub Actions*
          *Access this report at: [helpline-coverage.md](https://github.com/${{ github.repository }}/blob/${{ github.ref_name }}/helplinev1/helpline-coverage.md)*
          EOF
          
          echo "✅ Detailed coverage report generated in helplinev1/helpline-coverage.md"
          ls -la ../helpline-coverage.md
          echo "Content preview:"
          head -20 ../helpline-coverage.md

      - name: Commit Coverage Report to Working Branch
        if: matrix.php-version == '8.3'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Handle different event types
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            # For pull requests, commit to the PR branch
            echo "🔄 Working with PR branch: ${{ github.head_ref }}"
            git fetch origin ${{ github.head_ref }}
            git checkout ${{ github.head_ref }}
            TARGET_BRANCH="${{ github.head_ref }}"
          else
            # For push events, commit to the current branch
            echo "🔄 Working with push branch: ${{ github.ref_name }}"
            TARGET_BRANCH="${{ github.ref_name }}"
          fi
          
          git add helplinev1/helpline-coverage.md
          
          if ! git diff --staged --quiet; then
            # Add [skip ci] for PR commits to avoid infinite loops
            if [ "${{ github.event_name }}" == "pull_request" ]; then
              git commit -m "📈 Auto-update coverage report - ${{ env.COVERAGE_PERCENTAGE }}% coverage [skip ci]"
            else
              git commit -m "📈 Auto-update coverage report - ${{ env.COVERAGE_PERCENTAGE }}% coverage"
            fi
            
            git push origin $TARGET_BRANCH
            echo "✅ Coverage report committed to $TARGET_BRANCH branch"
            
            # Show branch info for confirmation
            echo "📊 Coverage: ${{ env.COVERAGE_PERCENTAGE }}% on branch: $TARGET_BRANCH"
          else
            echo "ℹ️ No changes to commit - coverage report unchanged"
          fi

      - name: Upload Coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./helplinev1/rest_api/coverage.xml
          flags: helplinev1-backend
          name: helplinev1-rest-api-coverage
          fail_ci_if_error: false

      - name: Upload Coverage README as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: helpline-coverage-readme-php${{ matrix.php-version }}
          path: helplinev1/helpline-coverage.md
          retention-days: 30

      - name: Archive Coverage Results
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-php${{ matrix.php-version }}
          path: |
            helplinev1/rest_api/coverage-html/
            helplinev1/rest_api/coverage.xml
            helplinev1/rest_api/coverage-analysis.txt
            helplinev1/rest_api/test-summary.txt
            helplinev1/helpline-coverage.md
            helplinev1/rest_api/test-results.xml
          retention-days: 30

      - name: Archive Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-php${{ matrix.php-version }}
          path: helplinev1/rest_api/test-results.xml
          retention-days: 30

  # Docker Build and Integration Tests
  build-and-test:
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build PHP image
        run: |
          docker build -t helpline-php helplinev1/docker/php

      - name: Build NGINX image
        run: |
          docker build -t helpline-nginx helplinev1/docker/nginx

      - name: Run Docker Compose
        working-directory: helplinev1
        run: |
          docker compose up -d

      - name: Wait for app to be ready
        run: sleep 20  # Allow containers to settle

      - name: Check web endpoint
        run: |
          curl -I http://localhost:8087 || echo "Web check failed"

      - name: Test API endpoints
        run: |
          echo "Testing REST API endpoints..."
          curl -f http://localhost:8087/api/ || echo "API endpoint test failed"
          
      - name: Run API Integration Tests
        working-directory: helplinev1/rest_api
        run: |
          if [ -f "./vendor/bin/phpunit" ]; then
            docker exec helpline-php-api ./vendor/bin/phpunit tests/Integration/ --verbose || echo "Integration tests not available"
          fi

      - name: Cleanup
        if: always()
        working-directory: helplinev1
        run: docker compose down