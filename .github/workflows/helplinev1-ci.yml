name: HelplineV1 CI
permissions:
  contents: write

on:
  push:
    paths:
      - 'helplinev1/**'
    branches: [main]
  pull_request:
    paths:
      - 'helplinev1/**'
    branches: [main]
  workflow_dispatch:

jobs:
  # Unit Tests and Code Coverage for REST API Backend
  unit-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        php-version: ['8.2', '8.3']
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: rootpassword
          MYSQL_DATABASE: helpline_test
          MYSQL_USER: helpline_user
          MYSQL_PASSWORD: helpline_pass
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-version }}
          extensions: mbstring, xml, ctype, iconv, intl, pdo, pdo_mysql, dom, filter, gd, hash, json, libxml, openssl, pcre, session, tokenizer, zip, pcov
          tools: composer:v2
          coverage: pcov

      - name: Cache Composer packages
        id: composer-cache
        uses: actions/cache@v4
        with:
          path: helplinev1/rest_api/vendor
          key: ${{ runner.os }}-php-${{ matrix.php-version }}-${{ hashFiles('helplinev1/rest_api/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-${{ matrix.php-version }}-

      - name: Install Composer dependencies
        working-directory: helplinev1/rest_api
        run: composer install --prefer-dist --no-progress --no-suggest

      - name: Setup test database
        run: |
          mysql -h 127.0.0.1 -u root -prootpassword -e "CREATE DATABASE IF NOT EXISTS helpline_test;"
          mysql -h 127.0.0.1 -u root -prootpassword helpline_test < helplinev1/rest_api/config/uchl.sql || echo "Schema file not found, proceeding with tests"

      - name: Run Unit Tests
        working-directory: helplinev1/rest_api
        run: ./vendor/bin/phpunit --verbose --testdox

      - name: Run Tests with Coverage (PCOV)
        working-directory: helplinev1/rest_api
        run: ./vendor/bin/phpunit --coverage-text --coverage-clover=coverage.xml --coverage-html=coverage-html

      - name: Extract Coverage from PCOV XML
        working-directory: helplinev1/rest_api
        run: |
          # Extract coverage percentage from PCOV XML (the official source)
          if [ -f "coverage.xml" ]; then
            # Parse XML to get line coverage percentage
            COVERAGE=$(python3 -c "
            import xml.etree.ElementTree as ET
            try:
                tree = ET.parse('coverage.xml')
                root = tree.getroot()
                metrics = root.find('.//metrics')
                if metrics is not None:
                    covered = float(metrics.get('coveredstatements', 0))
                    total = float(metrics.get('statements', 0))
                    if total > 0:
                        percentage = round((covered / total) * 100)
                        print(f'{percentage}')
                    else:
                        print('0')
                else:
                    print('0')
            except Exception as e:
                print('0')
            " 2>/dev/null || echo "0")
          else
            COVERAGE="0"
          fi
          
          echo "PCOV Coverage: ${COVERAGE}%"
          echo "COVERAGE_PERCENTAGE=$COVERAGE" >> $GITHUB_ENV
          
          # Set coverage color for badge
          if [ "$COVERAGE" -ge "80" ]; then
            echo "COVERAGE_COLOR=brightgreen" >> $GITHUB_ENV
          elif [ "$COVERAGE" -ge "60" ]; then
            echo "COVERAGE_COLOR=yellow" >> $GITHUB_ENV
          elif [ "$COVERAGE" -ge "40" ]; then
            echo "COVERAGE_COLOR=orange" >> $GITHUB_ENV
          else
            echo "COVERAGE_COLOR=red" >> $GITHUB_ENV
          fi

      - name: Generate Coverage README.md
        if: matrix.php-version == '8.3'
        run: |
          # Create comprehensive coverage README in root directory
          cat > helpline-coverage.md << EOF
          # 📊 HelplineV1 Code Coverage Report
          
          ![Coverage](https://img.shields.io/badge/Coverage-${{ env.COVERAGE_PERCENTAGE }}%25-${{ env.COVERAGE_COLOR }})
          ![PHP](https://img.shields.io/badge/PHP-8.2%20%7C%208.3-blue)
          ![Tests](https://img.shields.io/badge/Tests-PHPUnit-green)
          ![Database](https://img.shields.io/badge/Database-MySQL%208.0-orange)
          
          ## 📈 Coverage Summary
          
          **Overall Coverage:** ${{ env.COVERAGE_PERCENTAGE }}%
          
          **Generated:** \$(date -u "+%Y-%m-%d %H:%M:%S UTC")
          
          **Branch:** ${{ github.ref_name }}
          
          **Commit:** ${{ github.sha }}
          
          **PHP Version:** ${{ matrix.php-version }}
          
          **Coverage Source:** PCOV (PHPUnit Official)
          
          ## 🎯 Coverage Status
          
          EOF
          
          # Add status based on coverage percentage
          if [ "${{ env.COVERAGE_PERCENTAGE }}" -ge "80" ]; then
            echo "🟢 **EXCELLENT** - Coverage exceeds 80%" >> helpline-coverage.md
          elif [ "${{ env.COVERAGE_PERCENTAGE }}" -ge "60" ]; then
            echo "🟡 **GOOD** - Coverage is between 60-80%" >> helpline-coverage.md
          elif [ "${{ env.COVERAGE_PERCENTAGE }}" -ge "40" ]; then
            echo "🟠 **FAIR** - Coverage is between 40-60%" >> helpline-coverage.md
          else
            echo "🔴 **NEEDS IMPROVEMENT** - Coverage below 40%" >> helpline-coverage.md
          fi
          
          # Add detailed coverage information
          cat >> helpline-coverage.md << 'EOF'
          
          ## 📋 Test Details
          
          ### 🧪 Test Suite Information
          - **Framework:** PHPUnit
          - **Coverage Driver:** PCOV
          - **Test Database:** MySQL 8.0
          - **Test Environment:** Ubuntu Latest
          
          ### 📊 Coverage Breakdown
          
          The coverage analysis includes:
          - ✅ REST API endpoints (`/api/`)
          - ✅ Core PHP libraries (`/lib/`)
          - ✅ Database interactions
          - ✅ Authentication mechanisms
          - ✅ Data validation
          
          ## 🎯 Coverage Guidelines
          
          | Coverage | Status | Description |
          |----------|--------|-------------|
          | 90%+     | 🟢 Excellent | Outstanding test coverage |
          | 80-89%   | 🟡 Good | Well-tested codebase |
          | 60-79%   | 🟠 Fair | Moderate test coverage |
          | 40-59%   | 🔴 Poor | Limited test coverage |
          | <40%     | ❌ Critical | Insufficient test coverage |
          
          ## 📁 Coverage Files
          
          The following coverage files are generated:
          
          - **📊 HTML Report:** Available in GitHub Actions artifacts (`coverage-html/`)
          - **📄 XML Report:** `coverage.xml` (for Codecov integration)
          - **📝 Text Report:** Available in CI logs
          - **📋 This Report:** `helpline-coverage.md`
          
          ## 🚀 Running Tests Locally
          
          ### Prerequisites
          ```bash
          # Install PHP 8.2+ with required extensions
          # Install Composer
          # Setup MySQL 8.0
          ```
          
          ### Setup and Run Tests
          ```bash
          # Navigate to REST API directory
          cd helplinev1/rest_api
          
          # Install dependencies
          composer install
          
          # Setup test database
          mysql -u root -p -e "CREATE DATABASE helpline_test;"
          mysql -u root -p helpline_test < config/uchl.sql
          
          # Run tests
          ./vendor/bin/phpunit --verbose --testdox
          
          # Run tests with coverage
          ./vendor/bin/phpunit --coverage-html coverage-html --coverage-text
          
          # View HTML coverage report
          open coverage-html/index.html
          ```
          
          ## 🐳 Docker Testing
          
          ```bash
          # Build and run with Docker Compose
          cd helplinev1
          docker compose up -d
          
          # Run tests in container
          docker exec helpline-php-api ./vendor/bin/phpunit
          ```
          
          ## 📈 Continuous Integration
          
          This coverage report is automatically generated by:
          - **Workflow:** `.github/workflows/helplinev1-ci.yml`
          - **Trigger:** Push/PR to main branch with changes in `helplinev1/`
          - **Matrix Testing:** PHP 8.2 & 8.3
          - **External Integration:** Codecov for coverage tracking
          
          ## 🔗 Links
          
          - [GitHub Actions Workflow](../../.github/workflows/helplinev1-ci.yml)
          - [PHPUnit Documentation](https://phpunit.de/)
          - [PCOV Documentation](https://github.com/krakjoe/pcov)
          - [Codecov Dashboard](https://codecov.io/gh/${{ github.repository }})
          
          ---
          
          *Generated automatically by GitHub Actions*
          
          *Workflow Run: [${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})*
          EOF
          
          echo "✅ Coverage README.md generated in root directory"

      - name: Commit Coverage Report to Main Branch
        if: matrix.php-version == '8.3' && github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add helpline-coverage.md
          if ! git diff --staged --quiet; then
            git commit -m "📊 Auto-update coverage report - ${{ env.COVERAGE_PERCENTAGE }}% coverage"
            git push origin main
          else
            echo "No changes to commit"
          fi

      - name: Upload Coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./helplinev1/rest_api/coverage.xml
          flags: helplinev1-backend
          name: helplinev1-rest-api-coverage
          fail_ci_if_error: false

      - name: Upload Coverage README as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: helpline-coverage-readme-php${{ matrix.php-version }}
          path: helpline-coverage.md
          retention-days: 30

      - name: Archive Coverage Results
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-php${{ matrix.php-version }}
          path: |
            helplinev1/rest_api/coverage-html/
            helplinev1/rest_api/coverage.xml
            helplinev1/rest_api/test-results.xml
          retention-days: 30

      - name: Archive Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-php${{ matrix.php-version }}
          path: helplinev1/rest_api/test-results.xml
          retention-days: 30

  # Docker Build and Integration Tests
  build-and-test:
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build PHP image
        run: |
          docker build -t helpline-php helplinev1/docker/php

      - name: Build NGINX image
        run: |
          docker build -t helpline-nginx helplinev1/docker/nginx

      - name: Run Docker Compose
        working-directory: helplinev1
        run: |
          docker compose up -d

      - name: Wait for app to be ready
        run: sleep 20  # Allow containers to settle

      - name: Check web endpoint
        run: |
          curl -I http://localhost:8087 || echo "Web check failed"

      - name: Test API endpoints
        run: |
          echo "Testing REST API endpoints..."
          curl -f http://localhost:8087/api/ || echo "API endpoint test failed"
          
      - name: Run API Integration Tests
        working-directory: helplinev1/rest_api
        run: |
          if [ -f "./vendor/bin/phpunit" ]; then
            docker exec helpline-php-api ./vendor/bin/phpunit tests/Integration/ --verbose || echo "Integration tests not available"
          fi

      - name: Cleanup
        if: always()
        working-directory: helplinev1
        run: docker compose down