name: HelplineV1 CI/CD Pipeline
permissions:
  contents: write
  pull-requests: write
  packages: write

on:
  push:
    paths:
      - 'helplinev1/**'
    branches: [main, develop, justphyl]
  pull_request:
    paths:
      - 'helplinev1/**'
    branches: [main, develop]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_PHP: ${{ github.repository }}/helpline-php
  IMAGE_NAME_NGINX: ${{ github.repository }}/helpline-nginx

jobs:
  # Unit Tests and Code Coverage
  unit-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        php-version: ['8.2', '8.3']
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: rootpassword
          MYSQL_DATABASE: helpline_test
          MYSQL_USER: helpline_user
          MYSQL_PASSWORD: helpline_pass
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    outputs:
      coverage-percentage: ${{ steps.coverage.outputs.percentage }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-version }}
          extensions: mbstring, xml, ctype, iconv, intl, pdo, pdo_mysql, dom, filter, gd, hash, json, libxml, openssl, pcre, session, tokenizer, zip, pcov
          tools: composer:v2
          coverage: pcov

      - name: Cache Composer packages
        uses: actions/cache@v4
        with:
          path: helplinev1/rest_api/vendor
          key: ${{ runner.os }}-php-${{ matrix.php-version }}-${{ hashFiles('helplinev1/rest_api/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-${{ matrix.php-version }}-

      - name: Install dependencies
        working-directory: helplinev1/rest_api
        run: composer install --prefer-dist --no-progress --no-suggest

      - name: Setup test database
        run: |
          mysql -h 127.0.0.1 -u root -prootpassword -e "CREATE DATABASE IF NOT EXISTS helpline_test;"
          mysql -h 127.0.0.1 -u root -prootpassword helpline_test < helplinev1/rest_api/config/uchl.sql || echo "Schema file not found, proceeding with tests"

      - name: Run tests with coverage
        working-directory: helplinev1/rest_api
        run: |
          ./vendor/bin/phpunit --coverage-text --coverage-clover=coverage.xml --coverage-html=coverage-html || {
            echo "Tests failed. Creating fallback coverage.xml"
            printf '<?xml version="1.0"?>\n<coverage version="6.0" timestamp="1" lines-valid="100" lines-covered="0" line-rate="0.0">\n<sources><source>./</source></sources>\n<packages></packages>\n</coverage>\n' > coverage.xml
          }

      - name: Generate coverage report
        id: coverage
        working-directory: helplinev1/rest_api
        run: |
          php calculate-coverage.php > coverage-analysis.txt || echo "No detailed coverage analysis available" > coverage-analysis.txt
          COVERAGE=$(php calculate-coverage.php | grep "Estimated Line Coverage" | grep -oE "[0-9]+%" | grep -oE "[0-9]+" 2>/dev/null || echo "0")
          echo "percentage=$COVERAGE" >> $GITHUB_OUTPUT
          echo "COVERAGE_PERCENTAGE=$COVERAGE" >> $GITHUB_ENV
          
          if [ "$COVERAGE" -ge "80" ]; then COLOR="brightgreen"
          elif [ "$COVERAGE" -ge "60" ]; then COLOR="yellow"
          elif [ "$COVERAGE" -ge "40" ]; then COLOR="orange"
          else COLOR="red"; fi
          echo "COVERAGE_COLOR=$COLOR" >> $GITHUB_ENV

      - name: Create coverage report
        working-directory: helplinev1/rest_api
        run: |
          COVERAGE_DETAILS=$(cat coverage-analysis.txt 2>/dev/null || echo "No coverage analysis available")
          TEST_DETAILS=$(./vendor/bin/phpunit --testdox 2>&1 || echo "No test details available")
          
          printf '# Code Coverage Report - HelplineV1\n\n**Branch:** %s\n**Commit:** [%s](%s)\n**Generated:** %s\n**PHP Version:** %s\n\n## Coverage Summary\n\n![Coverage](https://img.shields.io/badge/Coverage-%s%%25-%s)\n![Tests](https://img.shields.io/badge/Tests-PHPUnit-blue)\n\n| Metric | Value |\n|--------| ------|\n| **Coverage** | %s%% |\n| **Generated** | %s |\n| **Branch** | %s |\n| **PHP Version** | %s |\n\n## Detailed Coverage Analysis\n\n```\n%s\n```\n\n## Test Summary\n\n```\n%s\n```\n\n---\n*Report generated automatically by GitHub Actions*\n' \
            "${{ github.ref_name }}" \
            "${GITHUB_SHA:0:7}" \
            "https://github.com/${{ github.repository }}/commit/${{ github.sha }}" \
            "$(date '+%Y-%m-%d %H:%M:%S UTC')" \
            "${{ matrix.php-version }}" \
            "${COVERAGE_PERCENTAGE:-0}" \
            "${COVERAGE_COLOR:-red}" \
            "${COVERAGE_PERCENTAGE:-0}" \
            "$(date '+%Y-%m-%d %H:%M:%S UTC')" \
            "${{ github.ref_name }}" \
            "${{ matrix.php-version }}" \
            "${COVERAGE_DETAILS}" \
            "${TEST_DETAILS}" > ../COVERAGE.md

      - name: Commit coverage report (PR only)
        if: github.event_name == 'pull_request' && matrix.php-version == '8.3'
        working-directory: helplinev1
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git fetch origin "${GITHUB_HEAD_REF}:${GITHUB_HEAD_REF}" || true
          git checkout "${GITHUB_HEAD_REF}" || true
          git add COVERAGE.md
          git commit -m "Update coverage report [skip ci]" || echo "No changes to commit"
          git push origin HEAD:${GITHUB_HEAD_REF}

  # Build and Push Docker Images - Now runs on all branches after successful tests
  build-images:
    runs-on: ubuntu-latest
    needs: unit-tests
    if: needs.unit-tests.result == 'success'
    
    outputs:
      php-image-tag: ${{ steps.php-tags.outputs.tag }}
      nginx-image-tag: ${{ steps.nginx-tags.outputs.tag }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Debug repository structure
        run: |
          echo "Current directory:"
          pwd
          echo ""
          echo "Repository root:"
          ls -la
          echo ""
          echo "HelplineV1 directory:"
          ls -la helplinev1/
          echo ""
          echo "Docker directory:"
          ls -la helplinev1/docker/
          echo ""
          echo "PHP Docker files:"
          ls -la helplinev1/docker/php/
          echo ""
          echo "Nginx Docker files:"
          ls -la helplinev1/docker/nginx/

      - name: Test local Docker builds
        working-directory: helplinev1
        run: |
          echo "Testing PHP build locally..."
          docker build -t test-helpline-php ./docker/php
          echo "PHP build successful!"
          
          echo "Testing Nginx build locally..."
          docker build -t test-helpline-nginx ./docker/nginx
          echo "Nginx build successful!"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate PHP image tags
        id: php-tags
        run: |
          TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PHP }}:${{ github.ref_name }}-${{ github.sha }}"
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "PHP_IMAGE_TAG=$TAG" >> $GITHUB_ENV
          echo "Generated PHP tag: $TAG"

      - name: Generate Nginx image tags
        id: nginx-tags
        run: |
          TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME_NGINX }}:${{ github.ref_name }}-${{ github.sha }}"
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "NGINX_IMAGE_TAG=$TAG" >> $GITHUB_ENV
          echo "Generated Nginx tag: $TAG"

      - name: Build and push PHP image
        working-directory: helplinev1
        run: |
          echo "Building PHP image with tag: ${{ env.PHP_IMAGE_TAG }}"
          docker build -t ${{ env.PHP_IMAGE_TAG }} ./docker/php
          docker push ${{ env.PHP_IMAGE_TAG }}
          echo "PHP image pushed successfully"

      - name: Build and push Nginx image
        working-directory: helplinev1
        run: |
          echo "Building Nginx image with tag: ${{ env.NGINX_IMAGE_TAG }}"
          docker build -t ${{ env.NGINX_IMAGE_TAG }} ./docker/nginx
          docker push ${{ env.NGINX_IMAGE_TAG }}
          echo "Nginx image pushed successfully"

  # Deploy to Staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [unit-tests, build-images]
    if: (github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch') && needs.build-images.result == 'success'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.STAGING_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.STAGING_HOST }} >> ~/.ssh/known_hosts

      - name: Create application files archive
        working-directory: helplinev1
        run: |
          tar -czf helplinev1-files.tar.gz application/ rest_api/ docker/config/
          ls -la helplinev1-files.tar.gz

      - name: Copy files to staging server
        run: |
          scp helplinev1/helplinev1-files.tar.gz ${{ secrets.STAGING_USER }}@${{ secrets.STAGING_HOST }}:/tmp/

      - name: Deploy to staging
        run: |
          ssh ${{ secrets.STAGING_USER }}@${{ secrets.STAGING_HOST }} << 'EOF'
          set -e
          
          echo "Starting deployment to staging..."
          
          # Variables
          DEPLOY_DIR="/opt/helplinev1"
          BACKUP_DIR="/opt/backups/helplinev1-$(date +%Y%m%d-%H%M%S)"
          PHP_IMAGE="${{ needs.build-images.outputs.php-image-tag }}"
          NGINX_IMAGE="${{ needs.build-images.outputs.nginx-image-tag }}"
          
          # Create backup
          echo "Creating backup..."
          sudo mkdir -p /opt/backups
          if [ -d "$DEPLOY_DIR" ]; then
            sudo cp -r "$DEPLOY_DIR" "$BACKUP_DIR"
          fi
          
          # Prepare deployment
          sudo mkdir -p "$DEPLOY_DIR"
          cd "$DEPLOY_DIR"
          
          # Extract application files
          sudo tar -xzf /tmp/helplinev1-files.tar.gz
          
          # Login to registry
          echo "${{ secrets.GITHUB_TOKEN }}" | sudo docker login ghcr.io -u ${{ github.actor }} --password-stdin
          
          # Pull images
          echo "Pulling images..."
          sudo docker pull $PHP_IMAGE
          sudo docker pull $NGINX_IMAGE
          
          # Stop existing containers
          echo "Stopping existing containers..."
          sudo docker-compose down 2>/dev/null || true
          
          # Create staging docker-compose file
          cat > docker-compose.yml << 'COMPOSE_EOF'
          services:
            database:
              image: mysql:8.0
              container_name: helpline-db-staging
              environment:
                MYSQL_ROOT_PASSWORD: ${{ secrets.STAGING_DB_ROOT_PASSWORD }}
                MYSQL_DATABASE: helpline_staging
                MYSQL_USER: ${{ secrets.STAGING_DB_USER }}
                MYSQL_PASSWORD: ${{ secrets.STAGING_DB_PASSWORD }}
              ports:
                - "3307:3306"
              volumes:
                - db_data_staging:/var/lib/mysql
                - ./rest_api/config/uchl.sql:/docker-entrypoint-initdb.d/01-complete-schema.sql
                - ./docker/mysql/init-user.sql:/docker-entrypoint-initdb.d/02-init-user.sql
                - ./docker/mysql/03-missing-columns.sql:/docker-entrypoint-initdb.d/03-missing-columns.sql
              restart: unless-stopped
              networks:
                - helpline-network
          
            php-api:
              image: $PHP_IMAGE
              container_name: helpline-php-staging
              volumes:
                - ./application:/var/www/html/helpline
                - ./rest_api/api:/var/www/html/helpline/api
                - ./rest_api/lib:/var/www/html/helpline/lib
                - ./docker/config/config-docker.php:/var/www/html/helpline/config.php
                - ./docker/config/config-docker.php:/var/www/html/helpline/api/config.php
              depends_on:
                - database
              environment:
                - DB_HOST=database
                - DB_NAME=helpline_staging
                - DB_USER=${{ secrets.STAGING_DB_USER }}
                - DB_PASS=${{ secrets.STAGING_DB_PASSWORD }}
              restart: unless-stopped
              networks:
                - helpline-network
          
            nginx:
              image: $NGINX_IMAGE
              container_name: helpline-nginx-staging
              ports:
                - "8888:80"
                - "8443:443"
              volumes:
                - ./application:/var/www/html/helpline
                - ./rest_api/api:/var/www/html/helpline/api
                - ./rest_api/lib:/var/www/html/helpline/lib
                - ./docker/config/config-docker.php:/var/www/html/helpline/config.php
              depends_on:
                - php-api
              restart: unless-stopped
              networks:
                - helpline-network
          
          volumes:
            db_data_staging:
          
          networks:
            helpline-network:
              driver: bridge
          COMPOSE_EOF
          
          # Start services
          echo "Starting services..."
          sudo docker-compose up -d
          
          # Wait for services
          echo "Waiting for services to initialize..."
          sleep 60
          
          # Health checks
          echo "Performing health checks..."
          
          # Check if containers are running
          if ! sudo docker ps | grep helpline-nginx-staging; then
            echo "Nginx container failed to start"
            exit 1
          fi
          
          if ! sudo docker ps | grep helpline-php-staging; then
            echo "PHP container failed to start"
            exit 1
          fi
          
          # Check web endpoint
          for i in {1..15}; do
            if curl -f -s http://localhost:8888 > /dev/null; then
              echo "Web endpoint is responding!"
              break
            fi
            echo "Health check attempt $i failed, retrying..."
            sleep 10
            if [ $i -eq 15 ]; then
              echo "Health checks failed after 15 attempts"
              sudo docker-compose logs
              exit 1
            fi
          done
          
          # Final success message
          echo "Deployment successful!"
          echo "Application is running at: http://${{ secrets.STAGING_HOST }}:8888"
          
          # Cleanup old images
          sudo docker image prune -f || true
          EOF

  # Build and Push Docker Images
  build-images:
    runs-on: ubuntu-latest
    needs: unit-tests
    if: needs.unit-tests.result == 'success'
    
    outputs:
      php-image-tag: ${{ steps.build-summary.outputs.php-tag }}
      nginx-image-tag: ${{ steps.build-summary.outputs.nginx-tag }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push PHP image
        working-directory: helplinev1
        run: |
          PHP_TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PHP }}:${{ github.ref_name }}-${{ github.sha }}"
          echo "Building PHP image: $PHP_TAG"
          
          docker build -t $PHP_TAG ./docker/php
          docker push $PHP_TAG
          
          echo "PHP_IMAGE_TAG=$PHP_TAG" >> $GITHUB_ENV
          echo "PHP image built and pushed successfully"

      - name: Build and push Nginx image
        working-directory: helplinev1
        run: |
          NGINX_TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME_NGINX }}:${{ github.ref_name }}-${{ github.sha }}"
          echo "Building Nginx image: $NGINX_TAG"
          
          docker build -t $NGINX_TAG ./docker/nginx
          docker push $NGINX_TAG
          
          echo "NGINX_IMAGE_TAG=$NGINX_TAG" >> $GITHUB_ENV
          echo "Nginx image built and pushed successfully"

      - name: Build summary
        id: build-summary
        run: |
          echo "php-tag=${{ env.PHP_IMAGE_TAG }}" >> $GITHUB_OUTPUT
          echo "nginx-tag=${{ env.NGINX_IMAGE_TAG }}" >> $GITHUB_OUTPUT
          echo "Build completed:"
          echo "- PHP: ${{ env.PHP_IMAGE_TAG }}"
          echo "- Nginx: ${{ env.NGINX_IMAGE_TAG }}"

  # Deployment Summary
  deployment-summary:
    runs-on: ubuntu-latest
    needs: [unit-tests, build-images, deploy-staging]
    if: always()
    
    steps:
      - name: Generate deployment summary
        run: |
          echo "## HelplineV1 CI/CD Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** [\`${GITHUB_SHA:0:7}\`](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }})" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### Job Results" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status | Coverage |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|----------|" >> $GITHUB_STEP_SUMMARY
          echo "| Unit Tests | ${{ needs.unit-tests.result }} | ${{ needs.unit-tests.outputs.coverage-percentage }}% |" >> $GITHUB_STEP_SUMMARY
          echo "| Build Images | ${{ needs.build-images.result }} | - |" >> $GITHUB_STEP_SUMMARY
          echo "| Deploy Staging | ${{ needs.deploy-staging.result }} | - |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.deploy-staging.result }}" == "success" ]; then
            echo "### Staging Deployment Successful!" >> $GITHUB_STEP_SUMMARY
            echo "**Application URL:** http://${{ secrets.STAGING_HOST }}:8888" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Docker Images Built:" >> $GITHUB_STEP_SUMMARY
            echo "- **PHP:** \`${{ needs.build-images.outputs.php-image-tag }}\`" >> $GITHUB_STEP_SUMMARY
            echo "- **Nginx:** \`${{ needs.build-images.outputs.nginx-image-tag }}\`" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.build-images.result }}" == "success" ]; then
            echo "### Images Built Successfully!" >> $GITHUB_STEP_SUMMARY
            echo "Ready for deployment to staging environment" >> $GITHUB_STEP_SUMMARY
          fi