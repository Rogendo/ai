name: Helpline CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_PREFIX: ${{ github.repository }}/helpline

jobs:
  # Code Quality & Security Checks
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mysqli, pdo, pdo_mysql, zip, gd, mbstring, xml, opcache
          coverage: xdebug

      - name: Validate PHP syntax
        run: |
          find application rest_api -name "*.php" -exec php -l {} \; | grep -v "No syntax errors detected" && exit 1 || echo "✅ PHP syntax validation passed"

      - name: Install Composer dependencies (if composer.json exists)
        run: |
          if [ -f composer.json ]; then
            composer install --no-dev --optimize-autoloader
          else
            echo "No composer.json found, skipping dependency installation"
          fi

      - name: Check for security vulnerabilities
        run: |
          # Check for common security patterns in PHP files
          echo "🔍 Checking for potential security issues..."
          
          # Check for SQL injection patterns
          if grep -r "mysql_query\|mysqli_query.*\$" application rest_api --include="*.php" 2>/dev/null; then
            echo "⚠️  Potential SQL injection vulnerabilities found"
          else
            echo "✅ No obvious SQL injection patterns detected"
          fi
          
          # Check for XSS vulnerabilities
          if grep -r "echo.*\$_" application rest_api --include="*.php" 2>/dev/null; then
            echo "⚠️  Potential XSS vulnerabilities found - review echo statements with user input"
          else
            echo "✅ No obvious XSS patterns detected"
          fi

      - name: Docker configuration validation
        run: |
          echo "🐳 Validating Docker configuration..."
          docker-compose config

  # Build and Test Docker Images
  build-and-test:
    name: Build & Test Docker Images
    runs-on: ubuntu-latest
    needs: code-quality
    strategy:
      matrix:
        service: [nginx, php-api]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image - ${{ matrix.service }}
        run: |
          if [ "${{ matrix.service }}" == "nginx" ]; then
            docker build -f docker/nginx/Dockerfile -t helpline-nginx:test .
          elif [ "${{ matrix.service }}" == "php-api" ]; then
            docker build -f docker/php/Dockerfile -t helpline-php:test .
          fi

      - name: Test Docker image - ${{ matrix.service }}
        run: |
          if [ "${{ matrix.service }}" == "nginx" ]; then
            docker run --rm -d --name test-nginx helpline-nginx:test
            sleep 5
            docker exec test-nginx nginx -t
            docker stop test-nginx
          elif [ "${{ matrix.service }}" == "php-api" ]; then
            docker run --rm -d --name test-php helpline-php:test
            sleep 5
            docker exec test-php php -v
            docker stop test-php
          fi

  # Integration Testing
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create test environment files
        run: |
          # Create minimal config for testing
          mkdir -p docker/mysql
          cat > docker/mysql/init-user.sql << 'EOF'
          -- Basic user initialization for testing
          GRANT ALL PRIVILEGES ON helpline.* TO 'helpline_user'@'%';
          FLUSH PRIVILEGES;
          EOF
          
          cat > docker/mysql/03-missing-columns.sql << 'EOF'
          -- Placeholder for missing columns script
          SELECT 1;
          EOF
          
          # Create basic SQL schema file
          mkdir -p rest_api/config
          cat > rest_api/config/uchl.sql << 'EOF'
          CREATE DATABASE IF NOT EXISTS helpline;
          USE helpline;
          CREATE TABLE IF NOT EXISTS test_table (id INT PRIMARY KEY, name VARCHAR(255));
          INSERT INTO test_table VALUES (1, 'test');
          EOF

      - name: Start services
        run: |
          docker-compose up -d
          sleep 30

      - name: Wait for database to be ready
        run: |
          timeout 60 bash -c 'until docker-compose exec -T database mysqladmin ping -h localhost --silent; do sleep 2; done'

      - name: Test database connectivity
        run: |
          docker-compose exec -T database mysql -u helpline_user -phelpline_pass -e "SHOW DATABASES;"

      - name: Test web application
        run: |
          # Test if the application is accessible
          response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8888/helpline/ || echo "connection_failed")
          echo "HTTP response: $response"
          
          if [ "$response" = "200" ] || [ "$response" = "302" ] || [ "$response" = "301" ]; then
            echo "✅ Web application is accessible"
          else
            echo "❌ Web application test failed with response: $response"
            docker-compose logs
            exit 1
          fi

      - name: Test API endpoints
        run: |
          # Test basic API endpoint
          api_response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8888/helpline/api/ || echo "connection_failed")
          echo "API response: $api_response"
          
          if [ "$api_response" = "200" ] || [ "$api_response" = "302" ] || [ "$api_response" = "404" ]; then
            echo "✅ API endpoint is accessible"
          else
            echo "❌ API test failed with response: $api_response"
            docker-compose logs
          fi

      - name: Cleanup
        if: always()
        run: |
          docker-compose down -v

  # Build and Push Production Images
  build-production:
    name: Build Production Images
    runs-on: ubuntu-latest
    needs: integration-tests
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/'))
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for nginx
        id: meta-nginx
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}-nginx
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Extract metadata for php-api
        id: meta-php
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}-php
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push nginx image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/nginx/Dockerfile
          push: true
          tags: ${{ steps.meta-nginx.outputs.tags }}
          labels: ${{ steps.meta-nginx.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push php-api image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/php/Dockerfile
          push: true
          tags: ${{ steps.meta-php.outputs.tags }}
          labels: ${{ steps.meta-php.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Security Scanning
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: build-production
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/'))
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [integration-tests, security-scan]
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://staging.helpline.example.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          echo "🚀 Deploying to staging environment..."
          # Add your staging deployment commands here
          # Example: kubectl apply -f k8s/staging/
          # Example: docker-compose -f docker-compose.staging.yml up -d
          echo "Staging deployment would be executed here"

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [integration-tests, security-scan]
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://helpline.example.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production
        run: |
          echo "🚀 Deploying to production environment..."
          # Add your production deployment commands here
          # Example: kubectl apply -f k8s/production/
          # Example: ansible-playbook deploy.yml
          echo "Production deployment would be executed here"

      - name: Notify deployment
        if: success()
        run: |
          echo "✅ Production deployment successful!"
          # Add notification logic (Slack, email, etc.)

  # Database Migration
  database-migration:
    name: Database Migration
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always() && (needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run database migrations
        run: |
          echo "🗄️ Running database migrations..."
          # Add your database migration commands here
          # Example: docker-compose exec -T database mysql -u root -p$DB_ROOT_PASSWORD helpline < migrations/latest.sql
          echo "Database migrations would be executed here"

  # Performance Testing
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/develop'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install k6
        run: |
          curl https://github.com/grafana/k6/releases/download/v0.47.0/k6-v0.47.0-linux-amd64.tar.gz -L | tar xvz
          sudo mv k6-v0.47.0-linux-amd64/k6 /usr/bin/

      - name: Run performance tests
        run: |
          cat > performance-test.js << 'EOF'
          import http from 'k6/http';
          import { check } from 'k6';

          export let options = {
            stages: [
              { duration: '2m', target: 10 }, // Ramp up
              { duration: '5m', target: 10 }, // Stay at 10 users
              { duration: '2m', target: 0 },  // Ramp down
            ],
          };

          export default function () {
            let response = http.get('https://staging.helpline.example.com/helpline/');
            check(response, {
              'status is 200': (r) => r.status === 200,
              'response time < 2000ms': (r) => r.timings.duration < 2000,
            });
          }
          EOF
          
          echo "Performance tests would run against staging environment"
          # k6 run performance-test.js

  # Cleanup
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-production, database-migration, performance-tests]
    if: always()
    
    steps:
      - name: Cleanup old images
        run: |
          echo "🧹 Cleaning up old container images and artifacts..."
          # Add cleanup commands here
          echo "Cleanup completed"
