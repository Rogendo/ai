name: Dependency Updates

on:
  schedule:
    # Run weekly on Sundays at 3 AM UTC
    - cron: '0 3 * * 0'
  workflow_dispatch: # Allow manual trigger

jobs:
  check-updates:
    name: Check for Updates
    runs-on: ubuntu-latest
    outputs:
      has-docker-updates: ${{ steps.docker-check.outputs.has-updates }}
      has-php-updates: ${{ steps.php-check.outputs.has-updates }}
      has-js-updates: ${{ steps.js-check.outputs.has-updates }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check Docker base image updates
        id: docker-check
        run: |
          echo "üê≥ Checking for Docker base image updates..."
          
          # Extract base images from Dockerfiles
          php_image=$(grep "^FROM" docker/php/Dockerfile | cut -d' ' -f2)
          nginx_image=$(grep "^FROM" docker/nginx/Dockerfile | cut -d' ' -f2)
          mysql_image=$(grep "image: mysql" docker-compose.yml | cut -d':' -f2- | tr -d ' ')
          
          echo "Current images:"
          echo "- PHP: $php_image"
          echo "- Nginx: $nginx_image"
          echo "- MySQL: $mysql_image"
          
          # Check if images have updates available (simplified check)
          has_updates=false
          
          # Pull latest images to check for updates
          if docker pull "$php_image" 2>/dev/null; then
            echo "‚úÖ PHP image check completed"
            has_updates=true
          fi
          
          if docker pull "$nginx_image" 2>/dev/null; then
            echo "‚úÖ Nginx image check completed"
            has_updates=true
          fi
          
          echo "has-updates=$has_updates" >> $GITHUB_OUTPUT

      - name: Check PHP dependency updates
        id: php-check
        run: |
          echo "üêò Checking for PHP dependency updates..."
          
          if [ -f composer.json ]; then
            # Install composer if not present
            if ! command -v composer &> /dev/null; then
              curl -sS https://getcomposer.org/installer | php
              sudo mv composer.phar /usr/local/bin/composer
            fi
            
            # Check for outdated packages
            composer outdated --format=json > outdated.json 2>/dev/null || echo "{}" > outdated.json
            
            if [ -s outdated.json ] && [ "$(cat outdated.json)" != "{}" ]; then
              echo "üì¶ PHP dependencies with available updates:"
              cat outdated.json
              echo "has-updates=true" >> $GITHUB_OUTPUT
            else
              echo "‚úÖ All PHP dependencies are up to date"
              echo "has-updates=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "‚ÑπÔ∏è No composer.json found"
            echo "has-updates=false" >> $GITHUB_OUTPUT
          fi

      - name: Check JavaScript dependency updates
        id: js-check
        run: |
          echo "üì¶ Checking for JavaScript dependency updates..."
          
          if [ -f package.json ]; then
            npm outdated --json > js-outdated.json 2>/dev/null || echo "{}" > js-outdated.json
            
            if [ -s js-outdated.json ] && [ "$(cat js-outdated.json)" != "{}" ]; then
              echo "üì¶ JavaScript dependencies with available updates:"
              cat js-outdated.json
              echo "has-updates=true" >> $GITHUB_OUTPUT
            else
              echo "‚úÖ All JavaScript dependencies are up to date"
              echo "has-updates=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "‚ÑπÔ∏è No package.json found"
            echo "has-updates=false" >> $GITHUB_OUTPUT
          fi

  update-docker-images:
    name: Update Docker Images
    runs-on: ubuntu-latest
    needs: check-updates
    if: needs.check-updates.outputs.has-docker-updates == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Update Docker base images
        run: |
          echo "üê≥ Updating Docker base images to latest stable versions..."
          
          # Update PHP base image to latest stable version
          current_php_version=$(grep "^FROM php:" docker/php/Dockerfile | cut -d':' -f2)
          echo "Current PHP version: $current_php_version"
          
          # Get latest PHP 8.2 version
          latest_php_version="8.2-fpm"
          
          if [ "$current_php_version" != "$latest_php_version" ]; then
            sed -i "s|FROM php:.*|FROM php:$latest_php_version|" docker/php/Dockerfile
            echo "‚úÖ Updated PHP base image to $latest_php_version"
          fi
          
          # Update Nginx base image
          current_nginx_version=$(grep "^FROM nginx:" docker/nginx/Dockerfile | cut -d':' -f2)
          echo "Current Nginx version: $current_nginx_version"
          
          latest_nginx_version="alpine"
          
          if [ "$current_nginx_version" != "$latest_nginx_version" ]; then
            sed -i "s|FROM nginx:.*|FROM nginx:$latest_nginx_version|" docker/nginx/Dockerfile
            echo "‚úÖ Updated Nginx base image to $latest_nginx_version"
          fi

      - name: Test updated Docker images
        run: |
          echo "üß™ Testing updated Docker images..."
          
          # Build and test PHP image
          docker build -f docker/php/Dockerfile -t helpline-php:test .
          docker run --rm helpline-php:test php -v
          
          # Build and test Nginx image
          docker build -f docker/nginx/Dockerfile -t helpline-nginx:test .
          docker run --rm -d --name nginx-test helpline-nginx:test
          sleep 5
          docker exec nginx-test nginx -t
          docker stop nginx-test
          
          echo "‚úÖ Docker images tested successfully"

      - name: Create Pull Request for Docker updates
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore: update Docker base images"
          title: "üê≥ Update Docker base images"
          body: |
            ## Docker Base Image Updates
            
            This PR updates the Docker base images to their latest stable versions:
            
            ### Changes
            - Updated PHP base image in `docker/php/Dockerfile`
            - Updated Nginx base image in `docker/nginx/Dockerfile`
            
            ### Testing
            - [x] Built and tested PHP image
            - [x] Built and tested Nginx image
            - [x] All containers start successfully
            
            ### Security
            - Updated images include latest security patches
            - No breaking changes expected
            
            This is an automated PR created by the dependency update workflow.
          branch: update/docker-images
          delete-branch: true

  update-php-dependencies:
    name: Update PHP Dependencies
    runs-on: ubuntu-latest
    needs: check-updates
    if: needs.check-updates.outputs.has-php-updates == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'

      - name: Update PHP dependencies
        run: |
          if [ -f composer.json ]; then
            echo "üì¶ Updating PHP dependencies..."
            
            # Update dependencies
            composer update --with-dependencies --optimize-autoloader
            
            # Generate updated lock file
            composer install --optimize-autoloader
            
            echo "‚úÖ PHP dependencies updated"
          fi

      - name: Test PHP dependencies
        run: |
          if [ -f composer.json ]; then
            echo "üß™ Testing PHP dependencies..."
            
            # Check for conflicts
            composer check-platform-reqs
            
            # Validate composer files
            composer validate --strict
            
            echo "‚úÖ PHP dependencies tested successfully"
          fi

      - name: Create Pull Request for PHP updates
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore: update PHP dependencies"
          title: "üêò Update PHP dependencies"
          body: |
            ## PHP Dependency Updates
            
            This PR updates PHP dependencies to their latest compatible versions.
            
            ### Changes
            - Updated `composer.lock` with latest dependency versions
            - All dependencies tested for compatibility
            
            ### Testing
            - [x] Composer validation passed
            - [x] Platform requirements check passed
            - [x] No dependency conflicts detected
            
            ### Security
            - Updated packages include latest security patches
            - Dependencies audited for known vulnerabilities
            
            This is an automated PR created by the dependency update workflow.
          branch: update/php-dependencies
          delete-branch: true

  update-js-dependencies:
    name: Update JavaScript Dependencies
    runs-on: ubuntu-latest
    needs: check-updates
    if: needs.check-updates.outputs.has-js-updates == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Update JavaScript dependencies
        run: |
          if [ -f package.json ]; then
            echo "üì¶ Updating JavaScript dependencies..."
            
            # Update dependencies
            npm update
            
            # Audit for security vulnerabilities
            npm audit --audit-level moderate
            
            echo "‚úÖ JavaScript dependencies updated"
          fi

      - name: Test JavaScript dependencies
        run: |
          if [ -f package.json ]; then
            echo "üß™ Testing JavaScript dependencies..."
            
            # Run any available tests
            if grep -q '"test":' package.json; then
              npm test
            fi
            
            # Check for vulnerabilities
            npm audit --audit-level high
            
            echo "‚úÖ JavaScript dependencies tested successfully"
          fi

      - name: Create Pull Request for JS updates
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore: update JavaScript dependencies"
          title: "üì¶ Update JavaScript dependencies"
          body: |
            ## JavaScript Dependency Updates
            
            This PR updates JavaScript dependencies to their latest compatible versions.
            
            ### Changes
            - Updated `package-lock.json` with latest dependency versions
            - All dependencies tested for compatibility
            
            ### Testing
            - [x] NPM audit passed (no high/critical vulnerabilities)
            - [x] No dependency conflicts detected
            - [x] Tests passed (if available)
            
            ### Security
            - Updated packages include latest security patches
            - Dependencies audited for known vulnerabilities
            
            This is an automated PR created by the dependency update workflow.
          branch: update/js-dependencies
          delete-branch: true

  security-audit:
    name: Security Audit After Updates
    runs-on: ubuntu-latest
    needs: [update-docker-images, update-php-dependencies, update-js-dependencies]
    if: always() && (needs.update-docker-images.result == 'success' || needs.update-php-dependencies.result == 'success' || needs.update-js-dependencies.result == 'success')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run security audit
        run: |
          echo "üîí Running security audit after dependency updates..."
          
          # Check PHP dependencies for vulnerabilities
          if [ -f composer.json ]; then
            composer audit --format=json > php-audit.json 2>/dev/null || echo "{}" > php-audit.json
            if [ -s php-audit.json ] && [ "$(cat php-audit.json)" != "{}" ]; then
              echo "‚ö†Ô∏è PHP security vulnerabilities found:"
              cat php-audit.json
            else
              echo "‚úÖ No PHP security vulnerabilities detected"
            fi
          fi
          
          # Check JavaScript dependencies for vulnerabilities
          if [ -f package.json ]; then
            npm audit --json > js-audit.json 2>/dev/null || echo "{}" > js-audit.json
            if [ -s js-audit.json ] && [ "$(cat js-audit.json)" != "{}" ]; then
              echo "‚ö†Ô∏è JavaScript security vulnerabilities found:"
              cat js-audit.json
            else
              echo "‚úÖ No JavaScript security vulnerabilities detected"
            fi
          fi

      - name: Upload audit results
        uses: actions/upload-artifact@v4
        with:
          name: security-audit-results
          path: |
            php-audit.json
            js-audit.json
          retention-days: 30

  notify-updates:
    name: Notify Update Results
    runs-on: ubuntu-latest
    needs: [check-updates, update-docker-images, update-php-dependencies, update-js-dependencies, security-audit]
    if: always()
    steps:
      - name: Generate update summary
        run: |
          echo "## üìã Dependency Update Summary" > update-summary.md
          echo "**Update Date:** $(date)" >> update-summary.md
          echo "" >> update-summary.md
          echo "### Update Results:" >> update-summary.md
          echo "- **Docker Images:** ${{ needs.update-docker-images.result || 'skipped' }}" >> update-summary.md
          echo "- **PHP Dependencies:** ${{ needs.update-php-dependencies.result || 'skipped' }}" >> update-summary.md
          echo "- **JavaScript Dependencies:** ${{ needs.update-js-dependencies.result || 'skipped' }}" >> update-summary.md
          echo "- **Security Audit:** ${{ needs.security-audit.result || 'skipped' }}" >> update-summary.md
          echo "" >> update-summary.md
          
          if [ "${{ needs.check-updates.outputs.has-docker-updates }}" == "true" ] || [ "${{ needs.check-updates.outputs.has-php-updates }}" == "true" ] || [ "${{ needs.check-updates.outputs.has-js-updates }}" == "true" ]; then
            echo "### Actions Taken:" >> update-summary.md
            echo "- Pull requests created for available updates" >> update-summary.md
            echo "- Security audit completed" >> update-summary.md
            echo "- Please review and merge the generated PRs" >> update-summary.md
          else
            echo "### Result:" >> update-summary.md
            echo "‚úÖ All dependencies are up to date!" >> update-summary.md
          fi
          
          cat update-summary.md

      - name: Upload update summary
        uses: actions/upload-artifact@v4
        with:
          name: update-summary
          path: update-summary.md
          retention-days: 30
