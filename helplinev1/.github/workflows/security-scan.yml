name: Security Scan

on:
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch: # Allow manual trigger
  push:
    branches: [ main ]
    paths:
      - 'application/**'
      - 'rest_api/**'
      - 'docker/**'
      - 'docker-compose.yml'

jobs:
  dependency-scan:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'

      - name: Check for PHP security advisories
        run: |
          # Check if composer.json exists and scan for vulnerabilities
          if [ -f composer.json ]; then
            composer audit --format=json > composer-audit.json || true
            if [ -s composer-audit.json ] && [ "$(cat composer-audit.json)" != "{}" ]; then
              echo "‚ö†Ô∏è Security vulnerabilities found in PHP dependencies:"
              cat composer-audit.json
              echo "::warning::Security vulnerabilities detected in PHP dependencies"
            else
              echo "‚úÖ No known security vulnerabilities in PHP dependencies"
            fi
          else
            echo "‚ÑπÔ∏è No composer.json found, skipping PHP dependency scan"
          fi

      - name: Scan for hardcoded secrets
        run: |
          echo "üîç Scanning for hardcoded secrets..."
          
          # Check for potential API keys, passwords, tokens
          secret_patterns=(
            "password.*=.*['\"][^'\"]{8,}['\"]"
            "api[_-]?key.*=.*['\"][^'\"]{8,}['\"]"
            "secret.*=.*['\"][^'\"]{8,}['\"]"
            "token.*=.*['\"][^'\"]{8,}['\"]"
            "mysql://.*:.*@"
            "postgresql://.*:.*@"
            "mongodb://.*:.*@"
          )
          
          found_secrets=false
          for pattern in "${secret_patterns[@]}"; do
            if grep -r -i -E "$pattern" application rest_api docker --include="*.php" --include="*.js" --include="*.yml" --include="*.yaml" --include="*.conf" 2>/dev/null; then
              found_secrets=true
              echo "::warning::Potential hardcoded secret found matching pattern: $pattern"
            fi
          done
          
          if [ "$found_secrets" = false ]; then
            echo "‚úÖ No obvious hardcoded secrets detected"
          fi

  code-security-scan:
    name: Code Security Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'

      - name: PHP Security Scan
        run: |
          echo "üîí Running PHP security analysis..."
          
          # Check for dangerous PHP functions
          dangerous_functions=(
            "eval"
            "exec"
            "system"
            "shell_exec"
            "passthru"
            "file_get_contents.*http"
            "curl_exec"
            "mysqli_query.*\\\$"
            "mysql_query.*\\\$"
          )
          
          echo "Checking for dangerous PHP functions..."
          found_issues=false
          for func in "${dangerous_functions[@]}"; do
            if grep -r -n -E "$func\s*\(" application rest_api --include="*.php" 2>/dev/null; then
              found_issues=true
              echo "‚ö†Ô∏è Found potentially dangerous function: $func"
            fi
          done
          
          # Check for SQL injection vulnerabilities
          echo "Checking for SQL injection patterns..."
          if grep -r -n -E "(SELECT|INSERT|UPDATE|DELETE).*\\\$_(GET|POST|REQUEST|COOKIE)" application rest_api --include="*.php" 2>/dev/null; then
            found_issues=true
            echo "‚ö†Ô∏è Potential SQL injection vulnerability detected"
          fi
          
          # Check for XSS vulnerabilities
          echo "Checking for XSS patterns..."
          if grep -r -n -E "echo.*\\\$_(GET|POST|REQUEST|COOKIE)" application rest_api --include="*.php" 2>/dev/null; then
            found_issues=true
            echo "‚ö†Ô∏è Potential XSS vulnerability detected"
          fi
          
          # Check for file inclusion vulnerabilities
          echo "Checking for file inclusion patterns..."
          if grep -r -n -E "(include|require).*\\\$_(GET|POST|REQUEST|COOKIE)" application rest_api --include="*.php" 2>/dev/null; then
            found_issues=true
            echo "‚ö†Ô∏è Potential file inclusion vulnerability detected"
          fi
          
          if [ "$found_issues" = false ]; then
            echo "‚úÖ No obvious security issues detected in PHP code"
          else
            echo "::warning::Security issues detected in code - please review"
          fi

  docker-security-scan:
    name: Docker Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker images for scanning
        run: |
          docker build -f docker/nginx/Dockerfile -t helpline-nginx:scan .
          docker build -f docker/php/Dockerfile -t helpline-php:scan .

      - name: Run Trivy vulnerability scanner on nginx image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'helpline-nginx:scan'
          format: 'table'
          exit-code: '0'  # Don't fail the job, just report
          severity: 'CRITICAL,HIGH'

      - name: Run Trivy vulnerability scanner on php image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'helpline-php:scan'
          format: 'table'
          exit-code: '0'  # Don't fail the job, just report
          severity: 'CRITICAL,HIGH'

      - name: Run Trivy filesystem scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'table'
          exit-code: '0'
          severity: 'CRITICAL,HIGH'

  configuration-security-check:
    name: Configuration Security Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check Docker configuration security
        run: |
          echo "üîß Checking Docker configuration security..."
          
          # Check docker-compose.yml for security issues
          echo "Checking docker-compose.yml..."
          
          # Check for privileged containers
          if grep -q "privileged.*true" docker-compose.yml 2>/dev/null; then
            echo "‚ö†Ô∏è Privileged container detected in docker-compose.yml"
          else
            echo "‚úÖ No privileged containers detected"
          fi
          
          # Check for host network mode
          if grep -q "network_mode.*host" docker-compose.yml 2>/dev/null; then
            echo "‚ö†Ô∏è Host network mode detected - security risk"
          else
            echo "‚úÖ No host network mode detected"
          fi
          
          # Check for volume mounts to sensitive directories
          sensitive_mounts=("/etc" "/var/run/docker.sock" "/proc" "/sys")
          for mount in "${sensitive_mounts[@]}"; do
            if grep -q "$mount:" docker-compose.yml 2>/dev/null; then
              echo "‚ö†Ô∏è Sensitive directory mount detected: $mount"
            fi
          done
          
          # Check Dockerfile security
          echo "Checking Dockerfile security..."
          for dockerfile in docker/*/Dockerfile; do
            if [ -f "$dockerfile" ]; then
              echo "Checking $dockerfile..."
              
              # Check if running as root
              if ! grep -q "USER " "$dockerfile"; then
                echo "‚ö†Ô∏è $dockerfile: No non-root user specified"
              fi
              
              # Check for latest tags
              if grep -q "FROM.*:latest" "$dockerfile"; then
                echo "‚ö†Ô∏è $dockerfile: Using 'latest' tag - not recommended"
              fi
            fi
          done

      - name: Check PHP configuration security
        run: |
          echo "üêò Checking PHP configuration security..."
          
          if [ -f docker/php/php.ini ]; then
            echo "Checking PHP configuration..."
            
            # Check for dangerous PHP settings
            dangerous_settings=(
              "allow_url_fopen.*On"
              "allow_url_include.*On"
              "register_globals.*On"
              "magic_quotes.*On"
              "display_errors.*On"
            )
            
            for setting in "${dangerous_settings[@]}"; do
              if grep -q -E "$setting" docker/php/php.ini 2>/dev/null; then
                echo "‚ö†Ô∏è Potentially dangerous PHP setting: $setting"
              fi
            done
            
            echo "‚úÖ PHP configuration security check completed"
          else
            echo "‚ÑπÔ∏è No custom PHP configuration found"
          fi

      - name: Check Nginx configuration security
        run: |
          echo "üåê Checking Nginx configuration security..."
          
          for nginx_conf in docker/nginx/*.conf; do
            if [ -f "$nginx_conf" ]; then
              echo "Checking $nginx_conf..."
              
              # Check for security headers
              security_headers=(
                "X-Frame-Options"
                "X-Content-Type-Options"
                "X-XSS-Protection"
                "Strict-Transport-Security"
              )
              
              missing_headers=()
              for header in "${security_headers[@]}"; do
                if ! grep -q -i "$header" "$nginx_conf"; then
                  missing_headers+=("$header")
                fi
              done
              
              if [ ${#missing_headers[@]} -gt 0 ]; then
                echo "‚ö†Ô∏è Missing security headers in $nginx_conf:"
                printf "  - %s\n" "${missing_headers[@]}"
              else
                echo "‚úÖ Security headers present in $nginx_conf"
              fi
              
              # Check for SSL configuration
              if grep -q -i "ssl" "$nginx_conf"; then
                echo "‚úÖ SSL configuration detected in $nginx_conf"
              else
                echo "‚ÑπÔ∏è No SSL configuration detected in $nginx_conf"
              fi
            fi
          done

  generate-security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [dependency-scan, code-security-scan, docker-security-scan, configuration-security-check]
    if: always()
    steps:
      - name: Generate summary report
        run: |
          echo "## üõ°Ô∏è Security Scan Summary" >> security-report.md
          echo "**Scan Date:** $(date)" >> security-report.md
          echo "" >> security-report.md
          echo "### Scan Results:" >> security-report.md
          echo "- **Dependency Scan:** ${{ needs.dependency-scan.result }}" >> security-report.md
          echo "- **Code Security Scan:** ${{ needs.code-security-scan.result }}" >> security-report.md
          echo "- **Docker Security Scan:** ${{ needs.docker-security-scan.result }}" >> security-report.md
          echo "- **Configuration Check:** ${{ needs.configuration-security-check.result }}" >> security-report.md
          echo "" >> security-report.md
          echo "### Recommendations:" >> security-report.md
          echo "1. Review any warnings generated during the scans" >> security-report.md
          echo "2. Update dependencies with known vulnerabilities" >> security-report.md
          echo "3. Implement missing security headers" >> security-report.md
          echo "4. Use specific version tags instead of 'latest'" >> security-report.md
          echo "5. Run with non-root users where possible" >> security-report.md
          
          cat security-report.md

      - name: Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: security-report.md
          retention-days: 30
